* ссылки на схемы
stakeholder groups
https://raw.githubusercontent.com/nmukhachev/system_architecture_homework/main/3_week_homework/3_week_homework_stakeholder_groups.svg

core domain chart
https://raw.githubusercontent.com/nmukhachev/system_architecture_homework/main/3_week_homework/3_week_homework_core_domain_chart_make_cats_free.svg

bounded contexts
https://raw.githubusercontent.com/nmukhachev/system_architecture_homework/main/3_week_homework/3_week_homework_bounded_context_and_subdomains.svg

architecture styels roundup
https://raw.githubusercontent.com/nmukhachev/system_architecture_homework/main/3_week_homework/3_week_homework_styles_roundup_wide.svg

* задания
- попробуйте расписать стейкхолдеров по группам из урока. Попутно пофантазируете, кого потенциально мы забыли указать в списке стейкхолдеров;

  забыли воркеров, кладовщиков, разработчиков системы матчинга

  https://raw.githubusercontent.com/nmukhachev/system_architecture_homework/main/3_week_homework/3_week_homework_stakeholder_groups.svg

  - Тесная работа
    - разработчики системы матчинга
    - Топ-менеджмент

  - Удовлетворение потребностей
    - Финотдел
    - Юристы

  - Информирование
    - Разработчики
    - Админы
    - Менеджеры
    - воркеры
    - Клиенты

  - Мониторинг
    - кладовщики

- выберите один из семи архитектурных стилей, описанных в уроке. Опишите, почему вы сделали такой выбор и по каким критериям сравнивали стили (можно использовать картинку из урока со сравнением стилей);

https://raw.githubusercontent.com/nmukhachev/system_architecture_homework/main/3_week_homework/3_week_homework_styles_roundup_wide.svg

  выбранный стиль - микросервисы

  - maintainability, simplicity - от разработчиков
  - agility, testability и deployability - Общие пожелания по системе
  - бюджет не ограничен - Контекст и проблема
  - модульность изолированность - этап жизни: проверка гипотезы

|----------------------------------------------+---------------+----------------------------------------------------------------------|
| поддомен                                     | вид поддомена | характеристики                                                       |
|----------------------------------------------+---------------+----------------------------------------------------------------------|
| поиск новых воркеров                         | supporting    | scalability, Availability - защита от ddos                           |
|----------------------------------------------+---------------+----------------------------------------------------------------------|
| скоринг воркеров                             | соre          | agility, testability и deployability - специфика домена              |
|                                              |               | avaliability - так как core domain                                   |
|----------------------------------------------+---------------+----------------------------------------------------------------------|
| мотивация воркеров                           | supporting    | aglity, consistency - консерны финотдела                             |
|----------------------------------------------+---------------+----------------------------------------------------------------------|
| продажа услуг                                | supporting    | performance, availability - консерны клиентов                        |
|                                              |               | scalability - консерн менеджеров                                     |
|                                              |               | consistency - консерн финотдела                                      |
|----------------------------------------------+---------------+----------------------------------------------------------------------|
| подбор лучшего воркера для выполнения услуги | core          | Modifiability, aglity, Testability, Deployability - специфика домена |
|                                              |               | avaliability - так как core domain                                   |
|----------------------------------------------+---------------+----------------------------------------------------------------------|
| выдача расходников                           | generic       | Usability - консерны кладовщиков                                     |
|----------------------------------------------+---------------+----------------------------------------------------------------------|
| увеличение мотивации менеджеров              | generic       | security - консерны менеджеров                                       |
|----------------------------------------------+---------------+----------------------------------------------------------------------|

  в новом core domain chart выделил отдельно скоринг лучших котов
https://raw.githubusercontent.com/nmukhachev/system_architecture_homework/main/3_week_homework/3_week_homework_core_domain_chart_make_cats_free.svg


- если выбрали распределённый архитектурный стиль, опишите, какие сервисы будут отдельно, и объясните, почему каждый из сервисов должен быть отдельно от остальных;

  - мотивация менеджеров отдельно, потому что про нее никто не должен знать, и это generic, купим у 1с.
    разработчикам этого модуля придется стереть память с помощью memory eraser.

  - выдача расходников на складе - generic. тоже купим у 1с.

  - скоринг воркеров отдельно, потому что релизный цикл не совпадает

  - матчинг отдельно, потому что он на отдельном стеке технологическом будет реализован

  - регистрация воркеров отдельно, потому что нужна защита от ddos

  - расчеты с клиентами и с воркерами в отдельных сервисах, чтобы изолировать финотдел для облегчения тестирования

  - все остальное в монолитный сервис, потому что масштабируется с ростом количества клиентов и заказов одинаково
    и имеет похожие характеристики
    - продажа услуг
    - подтверждение выполнения заказа
    - проверка качества

https://raw.githubusercontent.com/nmukhachev/system_architecture_homework/main/3_week_homework/3_week_homework_bounded_context_and_subdomains.svg

- выберите нужный вид баз данных для каждого из полученных сервисов. Если у вас получился один монолит — определите необходимый вид базы для этого монолита. Опишите, почему вы сделали такой выбор и какие критерии использовали для выбора;

  Скоринг воркеров - могут подойти реляционная или документоориентированная.
  Лучше взять реляционную, потому что будут частые изменения.
  Если база данных при частых изменениях не требует схемы, 
  то данные в ней становятся спагетти.

  Матчинг - выбирают разработчики алгоритма матчинга.
  Я бы порекомендовал им реляционную, потому что она проще и везде поддерживается.

  Регистрация воркеров - cloud native для размещения в облаке для защиты от ddos.

  Расчеты с клиентами - реляционная база из-за требований к consistency

  Расчеты с воркерами - реляционная база из-за требований к consistency

  Остальное - реляционная, потому что она проще и везде поддерживается


- выберите нужный стиль коммуникаций и их вид (синхронный/асинхронный). Опишите, почему вы сделали такой выбор и какие критерии использовали для выбора;

  Регистрация воркера.
  Передать данные о новых претендентах в тестирование и скоринг.
  Event-driven.
  Не требуется моментального ответа.
  
  Найм воркера.
  Передать данные о новом воркере в модуль продаж услуг.
  Event-driven
  Не требуется моментального ответа.

  Создание услуги.
  Нужно передавать событие о новом заказе в модуль матчинга.
  И в модули исполнения заказа.
  Для вызова матчинга нужно использовать асинхронный request-response, потому что нужен ответ, но не моментально.
  Для передачи данных в модули биллинга, азартные игры, выдачу расходников event-driven, потому что не нужен ответ.
  Для проверки качества и подтверждения заказа подойдут общие данные, потому что это проще.

  - предположите, какие фитнес-функции можно использовать для валидации итоговой системы. Можете считать, что система будет делаться с использованием любого языка программирования, следовательно, можете выбрать любые инструменты из любой экосистемы;

    Время от регистрации новых требований для отбора воркеров до поставки на прод не более 7 дней.
    Для скоринга воркеров каждый месяц добавляется тестов больше, чем в предыдущем месяце.
    Деплой отбора воркеров происходит не позднее 15 минут после слияния с мастером.

    Время от регистрации новых требований для остальных модулей до поставки на прод не более 60 дней.

    Время от регистрации новых требований для остальных модулей до поставки на прод в 90% задач не более 30 дней.

    2 новых способа списания денег с клиентов за квартал.

    Создание новых баз данных, топиков, схем событий только по согласованию с DBA.

    Для модулей биллинга нужно измерять количество дней с последней потери данных и 
    количество дней с последней проблемы с часовыми поясами (обычно бывает равно -1).

    Модуль регистрации воркеров - прохождение нагрузочного тестирования.

    Модуль заказов - прохождение нагрузочного тестирования.


- сделайте ADR, опишите принятие решения по изоляции одного из элементов как изолированного сервиса.

Title.
    1 Выделение модуля скоринга воркеров в отдельный сервис.

Status. 
    Accepted. Принято и идёт на реализацию;

Context.
    Система состоит из 12 баундед контекстов.
    в домене найма новых котов воркеров есть 2 поддомена 
      - поиск и привлечение новых кандидатов
      - скоринг воркеров для отсеивания непригодных

    с доменом найма новых котов воркеров связан домен заказа и оказания услуг

    у каждого из баундед контекстов домена найма котов есть характеристики:
      - поиск и привлечение новых кандидатов
        scalability, avaliability, так как необходима защита от ddos

      - скоринг воркеров для отсеивания непригодных
        agility, testability и deployability, avaliability - так как это core domain
        также релизный цикл скоринга воркеров должен существенно отличаться от релизного цикла остальный системы

    Альтернативы:
    Объединить получение заявок и скоринг в один модуль.

Decision. 
    Разделить модули скоринга и приема заявок.
    У модуля скоринга и отправки заявок разные релизные циклы.

    Если объединить эти 2 модуля, то testability и deployability будет ниже.

    К тому же руковотели ожидают ddos атаки на модуль приема заявок.
    Если атака будет успешной, то модуль может выйти из строя.
    Поэтому, чтобы при успешной атаке не поломался модуль скоринга,
    он должен быть отдельно от модуля приема заявок.

Consequences.
    Придется делать взаимодействие между модулем приема заявок и модулем скоринга.

Сompliance.
    Нужно будет проверять вручную, что код модулей отдельный, деплоится на разные хосты.

Alternatives.
| решение                                          | плюсы                                     | минусы                                 |
|--------------------------------------------------+-------------------------------------------+----------------------------------------|
| отдельные модули модули приема заявок и скоринга | - проще организовать защиту от ddos       | - дороже инфраструктура (не учитываем) |
|                                                  | - легче организовать отдельный ускоренный | - больше сложность                     |
|                                                  | релизный цикл для модуля скоринга         |                                        |
|--------------------------------------------------+-------------------------------------------+----------------------------------------|
| совмещенные модули приема заявок и скоринга      | - проще способ передачи данных            | - затруднительно организовать          |
|                                                  | о новых заявках                           | укороченный релизный цикл              |
|                                                  | - нужно меньше команд разработки          | - защита от ddos сложнее               |
|--------------------------------------------------+-------------------------------------------+----------------------------------------|
